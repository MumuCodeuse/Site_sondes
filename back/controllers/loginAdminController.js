// I. circuit classique de connexion de l'Admin

// 1. Inclure l'adresse mail de l'admin ds le bdd. Mise en place du r√¥le admin via table d√©di√©e
// v√©rifier dans la BDD l'enregistrement de l'admin + le mot de passe : A faire

//2. import biblioth√®que et autre
import Administrator from "../data/models/bases/Administrator.js";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import fs from "fs";
import {jwt} from "./utils/config.js"

// 3.  R√©cup√©ration email et mot de passe du formulaire de connexion
// POST /login - Authentification de fa√ßon classique

app.post("/login", async (req, res) => {
  try {
    const { emailForm, passwordForm } = req.body;

    // R√©cup√©ration dans la bdd de l'administrateur correspondant
    const admin = await Administrator.findOne({
      where: {email: emailForm,},
    });

    if (!admin) {
        return res.status(401).json({ message: "Admin inconnu" });
      }

    // Comparaison mot de passe
    const passwordHash = admin.password;

    const isMatch = await bcrypt.compare(passwordForm, passwordHash);
      if (!isMatch) {
        res.satus(401).json({message:"Admin inconnu"});
      };

//4. R√©cup√©rer l'ID, email et le r√¥le de l'administrateur correspondantConstruction du token pour le renvoyer
      const tokenConstruction = { 
      idAdmin : await admin.admin_id,
      emailAdmin : await admin.email,
      roleAdmin : await admin.role,
      };
      const optionToken = {
        algorithm: "RS256",
        expiresIn: "2h",
      };
//5. Envoie du token, d'un message de confirmation et acc√®s √† l'interface
      const token = jwt.sign(tokenConstruction, jwt.jwtPrivateKey, optionToken);
      return res
              .status(200)
              .json({ token, message :"Acc√®s autoris√©"});

            // Acc√®s √† l'interface  
  } catch (error) {
    return res
      .status(500)
      .json({ message: "Erreur dans la r√©cup√©ration des donn√©es" });
  }
});

//6. Nombre de tentatives a d√©finir avant blocage temporaire : pour √©viter les brute force attacks: A developper


//7 . Cr√©er le Router 
// -------------------------------------------------------------------------
// Gestion de l'oubli de mot de passe : d√©velopper



// ------------------------------------------------------------------------------------------------------------------
// Une fois que le Front a re√ßu le token :
// √Ä chaque requ√™te vers les routes d‚Äôadministration, le Front doit envoyer ce token (souvent dans le header Authorization).
// Le backend intercepte les requ√™tes, v√©rifie et d√©code le token RSA gr√¢ce √† la cl√© publique.
// Et l√†, regarder le r√¥le dans le payload du token :
// -Si c‚Äôest une administratrice, autorisation ‚úÖ
// -Sinon, refus üö´

// Afficher √† l‚Äôadmin le formulaire de gestion des sondes, rovers, missions 
// Ce formulaire est uniquement visible si le Front a re√ßu un token valide et un r√¥le ‚Äúadmin‚Äù.

